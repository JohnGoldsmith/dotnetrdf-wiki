[[Home]] > [[User Guide]] > [[User Guide/Equality and Comparison|Equality and Comparison]]

= Equality and Comparison in dotNetRDF =

This page covers how equality and comparison are defined for the various core classes in the library and in some cases how to change the behavior as necessary.

== Nodes ==

As discussed in the [[User Guide/Library Overview|Library Overview]] there are various types of node representing the different types of RDF term that may exist and be represented within a RDF graph.

The [[http://www.w3.org/TR/rdf-concepts/|RDF Concepts and Abstract Syntax (W3C Specification)]] defines how and when terms are considered equal and so the definition of ##Equals()## for nodes is based upon this.

=== IUriNode ===

URI Nodes are considered equal if they represent equal URIs, URI equality is defined in RFC ????.  Primarily this requires each component of a URI to be equal on a character by character basis with some scheme specific extensions, for example the default port for a HTTP URI is 80 so that may be omitted e.g.

{{{
#!csharp

IGraph g = new Graph();

IUriNode a = g.CreateUriNode(UriFactory.Create("http://example.com/test"));
IUriNode b = g.CreateUriNode(UriFactory.Create("http://example.com:80/test"));

//This prints true because the URIs are equal according to URI equality rules
Console.WriteLine(a.Equals(b));
}}}

=== IBlankNode ===

Blank Nodes are scoped specifically to a Graph, Blank Nodes are only considered equal if they were created by the same ##IGraph## object and have identical IDs.

{{{
#!csharp

IGraph g = new Graph();
IGraph h = new Graph();

IBlankNode a = g.CreateBlankNode("test");
IBlankNode b = h.CreateBlankNode("test");

//This prints false since although they have the same ID they come from
//different graphs
Console.WriteLine(a.Equals(b));
}}}

=== ILiteralNode ===

